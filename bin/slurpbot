#!/usr/bin/env ruby

require 'socket'
require 'net/http'
require 'uri'

class SlurpBot

  def initialize(server, port, channels, add_url)
    @server = server
    @port = port
    @threads = []
    @add_url = add_url
    @debug = true
    @auto_join_invite = true
    @channels = channels
    @nick = "slurp"
  end

  def connect
    @socket = TCPSocket.open(@server, @port)
  end

  def join
    say "NICK #{@nick}"
    say "USER ircbot 0 * #{@nick}"
    @channels.each {|c| say "JOIN ##{c}" }
  end

  def say(msg)
    puts msg
    @socket.puts msg
  end

  def say_to_chan(msg)
    say "PRIVMSG ##{@channel} :#{msg}"
  end

  def action(msg)
    say_to_chan "#{1.chr}ACTION #{msg}#{1.chr}"
  end

  def log_url(msg, channel, url)
    @threads << send_post(msg, channel, url)
  end

  def echo_response(res)
    case res
    when Net::HTTPSuccess, Net::HTTPRedirection
      puts res.body
    else
      puts "An error occured."
    end
    if @debug
      puts "Thread count: #{@threads.count}"
    end
  end

  def cleanup_threads
    @threads.each_with_index do |thread, i|
      if thread.status == "sleep"
        next
      elsif thread.status == false  && thread.value
        echo_response(thread.value)
        pop_thread(i)
      end
    end
  end

  def pop_thread(index)
    @threads.delete_at(index)
  end

  def send_post(msg, channel, url)
    Thread.new do
      post_url = URI.parse(@add_url)
      req = Net::HTTP::Post.new(post_url.path)
      req.set_form_data({
        'url' => url,
        'msg' => msg,
        'channel' => channel
      })
      http = Net::HTTP.new(post_url.host, post_url.port)
      res = http.start {|http| http.request(req) }
    end
  end

  def run
    until @socket.closed? do
      msg = @socket.gets
      puts msg

      if msg.match(/^PING :(.*)$/)
        say "PONG #{$~[1]}"
        next
      end

      if msg.match(/INVITE #{@nick} :(.*)$/)
        channel = $~[1].delete("#").strip
        puts "Invite to #{channel} received" if @debug
        say "JOIN ##{channel}" if should_join_invite?(channel)
        next
      end

      if msg.match(/PRIVMSG #(#{@channels.join("|")}) :(.*)$/)
        content = $~[2]
        channel = $~[1]

        if content.match(/(http|https):\/\/[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(([0-9]{1,5})?\/.*)?/ix)
          
          log_url(msg, channel, $~[0])
        end

        if content.match(/pets #{@nick}/)
          action "looks up from his bowl of links and wiggles excitedly!"
        end
      end
      cleanup_threads
    end
    part
  end

  def part
    @channels.each {|c| say "PART ##{c} :Quit"}
    say 'QUIT'
  end

  def shutdown
    part
    @threads.each { |t| t.join }
    exit
  end

  def alive?
    !@socket.closed? if @socket
  end

  def should_join_invite?(channel)
    @channels.include?(channel) && @auto_join_invite
  end

end

def is_production?
  ARGV.size == 0
end

add_url = is_production? ? "http://slurp.heroku.com/link/create" : "http://localhost:4567/link/create"
server = is_production? ? 'irc.oftc.net' : 'localhost'
channel = is_production? ? ['blackscreen', 'randonom'] : ['slurp-test']

bot = SlurpBot.new(server, 6667, channel, add_url)
trap("INT"){ bot.shutdown }

while true do
  unless bot.alive?
    bot.connect
    bot.join
    bot.run
  end
  sleep_time = 90
  puts "Waiting #{sleep_time} seconds to reconnect..."
  sleep sleep_time
end
