#!/usr/bin/env ruby

require 'socket'
require 'net/http'
require 'uri'

class SlurpBot

  def initialize(server, port, channel)
    @server = server
    @port = port
    @threads = []
    #@add_url = "http://localhost:4567/link/create"
    @add_url = "http://afternoon-flower-68.heroku.com/link/create"
    @debug = true
    @channel = channel
    @nick = "slurp"
  end

  def connect
    @socket = TCPSocket.open(@server, @port)
  end

  def join
    say "NICK #{@nick}"
    say "USER ircbot 0 * #{@nick}"
    say "JOIN ##{@channel}"
    action "gets out his spoon and starts gobbling links"
  end

  def say(msg)
    puts msg
    @socket.puts msg
  end

  def say_to_chan(msg)
    say "PRIVMSG ##{@channel} :#{msg}"
  end

  def action(msg)
    say_to_chan "#{1.chr}ACTION #{msg}#{1.chr}"
  end

  def log_url(msg, url)
    @threads << send_post(msg, url)
  end

  def echo_response(res)
    case res
    when Net::HTTPSuccess, Net::HTTPRedirection
      puts res.body
    else
      puts res.error!
    end
    if @debug
      puts "Thread count: #{@threads.count}"
    end
  end

  def cleanup_threads
    @threads.each_with_index do |thread, i|
      if thread.status == "sleep"
        next
      elsif thread.status == false  && thread.value
        echo_response(thread.value)
        pop_thread(i)
      end
    end
  end

  def pop_thread(index)
    @threads.delete_at(index)
  end

  def send_post(msg, url)
    Thread.new do
      post_url = URI.parse(@add_url)
      req = Net::HTTP::Post.new(post_url.path)
      req.set_form_data({
        'url' => url,
        'msg' => msg
      })
      http = Net::HTTP.new(post_url.host, post_url.port)
      res = http.start {|http| http.request(req) }
    end
  end

  def run
    until @socket.closed? do
      msg = @socket.gets
      puts msg

      if msg.match(/^PING :(.*)$/)
        say "PONG #{$~[1]}"
        next
      end

      if msg.match(/PRIVMSG ##{@channel} :(.*)$/)
        content = $~[1]

        if content.match(/(http|https):\/\/[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(([0-9]{1,5})?\/.*)?/ix)
          log_url(msg, $~[0])
        end
      end
      cleanup_threads
    end
    part
  end

  def part
    action "puts away his spoon and burps loudly"
    say "PART ##{@channel} :Quit"
    say 'QUIT'
  end

  def shutdown
    part
    @threads.each { |t| t.join }
    exit
  end

  def alive?
    !@socket.closed? if @socket
  end

end

bot = SlurpBot.new("irc.oftc.net", 6667, 'slurp-test')
trap("INT"){ bot.shutdown }

while true do
  unless bot.alive?
    bot.connect
    bot.join
    bot.run
  end
  sleep 90
  puts "Waiting to reconnect..."
end
